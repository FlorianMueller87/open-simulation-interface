syntax = "proto2";

option optimize_for = SPEED;

import "osi_version.proto";
import "osi_common.proto";
import "osi_trafficlight.proto";
import "osi_trafficsign.proto";
import "osi_roadmarking.proto";
import "osi_lane.proto";
import "osi_object.proto";

package osi3;

// V2X include four main types: 
//    1. V2I(vehicle-to-infrstructure)
//    2. V2P(vehicle-to-pedestrian)
//    3. V2N(vehicle-to-network )
//    4. V2V(vehicle-to-vehicle)



//
// 
//  \brief  Road facilities(roadmarking,lane boundary, lane, traffic light,traffic sign), stationary and moving objects detected by RSU alike devices. 
//
//

message V2I {


    // The list of stationary objects (excluding traffic signs and traffic
    // lights).
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated StationaryObject stationary_object = 1;


    // The list of all other moving objects including all (host) vehicles.
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated MovingObject moving_object = 2;

    // The list of traffic signs.
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated TrafficSign traffic_sign = 3;

    // The list of traffic lights.
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated TrafficLight traffic_light = 4;

    // The list of road surface markings (lane markings are excluded and
    // defined as \c LaneBoundary).
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated RoadMarking road_marking = 5;

    // The list of lane boundaries.
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated LaneBoundary lane_boundary = 6;

    // The list of lanes forming a road network.
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated Lane lane = 7;

    // The list of roads in current visible area (circle area, with default radius)
    


}


message GetEnvInfoReq{
    optional Vector3d position = 1;
    int radius =2 ;


}

message GetEnvInfoResp {
    V2I env_info = 1;
}

service V2X {
    rpc GetEnvInfo(GetEnvInfoReq) returns (GetEnvInfoResp);
}


//
//  \brief  Broadcasted by vehicle. 
//

message V2V {

    // The ID of the Vehicle.
    //
    // \rules
    // is_globally_unique
    // \endrules
    //
    optional Identifier id = 1;

    // The base parameters of the vehicle.
    //
    // \note The bounding box does NOT include side mirrors for vehicles.
    // \note The height includes the ground_clearance. It always goes from the
    // top to the ground.
    //
    optional BaseMoving base = 2;

    // Specific information about the vehicle.
    //
    // \note This field is mandatory if the \c #type is
    // #TYPE_VEHICLE .
    //
    // \rules
    // check_if this.type is_equal_to 2 else do_check is_set
    // \endrules
    //
    optional MovingObject.VehicleAttributes vehicle_attributes = 5;

    // Specific information about the classification of the vehicle.
    //
    //
    // \note This field is mandatory if the \c #type is
    // #TYPE_VEHICLE .
    //
    // \rules
    // check_if this.type is_equal_to 2 else do_check is_set
    // \endrules
    //
    optional MovingObject.VehicleClassification vehicle_classification = 6;

}

//
//  \brief  The V2N placeholder 
//
//

message V2N {

}

//
//  \brief  The V2P placeholder 
//

message V2P{

}



 //
 //\brief Composition of V2I, V2V, V2P, V2N . 
 //   
 // The message is requested by host_vehicle. 
 // Each of four types of message have both ground truth version and simulated version(gt + noise).
 //

message V2X {

   // The interface version used by the sender (i.e. the simulation
    // environment).
    //
    optional InterfaceVersion version = 1;

    // The data timestamp of the simulation environment. The zero time point is
    // arbitrary but must be identical for all messages.
    // Recommendation: Zero time point for start point of the simulation.
    //
    // \note Zero time point does not need to coincide with the UNIX epoch.
    //
    // \note For ground truth data this timestamp coincides both with the
    // notional simulation time the data applies to and the time it was sent
    // (there is no inherent latency for ground truth data, as opposed to
    // sensor data).
    //
    optional Timestamp timestamp = 2;


    //  Infrastructure in simulated environment, including stationary and moving objects detected by RSU.
    //
    // \rules
    // refers_to: V2I
    // \endrules
    //

    optional V2I v2i = 4;

    // Ground truth version of infrastructure in simulated environment, including stationary and moving objects detected by RSU.
    //
    // \rules
    // refers_to: V2I
    // \endrules
    //

   optional V2I v2i_gt = 5;

    //  Network in simulated environment, internet, communication network.
    //
    // \rules
    // refers_to: V2N
    // \endrules
    //
   optional V2N v2n = 6;
   //  Groud truth version of network (Internet, communication network) in simulated environment 
    //
    // \rules
    // refers_to: V2N
    // \endrules
    //

   optional  V2N v2n_gt = 7;


    //  Simulated pedestrain.
    //
    // \rules
    // refers_to: V2P
    // \endrules
    //

   repeated V2P v2p = 8;

   //  Ground truth of simulated pedestrain.
    //
    // \rules
    // refers_to: V2P
    // \endrules
    //

   repeated V2P v2p_gt = 9;

    //  Vehicles in simulated environment.
    //
    // \rules
    // refers_to: V2V
    // \endrules
    //
    

   repeated V2V v2v = 10;

    //  Gound truth version of  vehicles in  simulated environment.
    //
    // \rules
    // refers_to: V2V
    // \endrules
    //

   repeated V2V v2v_gt = 11;

}




