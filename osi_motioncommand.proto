syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi3;

//
// \brief A dynamic state describing the 2D location, orientation and
// dynamic properties of an object
//
// The coordinate system is right handed, a heading of zero equalling
// the object being heading in x-direction.
// All coordinates and orientations are relative to the global ground
// truth frame.
//
// Units are [m] for positions, [m/s] for velocities, [m/s^2] for
// accelerations and [rad] for angles.
//
message DynamicState
{
    // The x coordinate.
    //
    // Unit: [m]
    //
    optional double global_position_x = 1;

    // The y coordinate.
    //
    // Unit: [m]
    //
    optional double global_position_y = 2;

    // The orientation from x-axis, counter-clockwise.
    //
    // Unit: [rad]
    //
    optional double heading_angle = 3;

    // The scalar velocity.
    //
    // Unit: [m/s]
    //
    optional double velocity = 4;

    // The scalar acceleration.
    //
    // Unit: [m/s^2]
    //
    optional double acceleration = 5;

    // The curvature of the path of the object.
    //
    // Unit: [1/m]
    //
    optional double curvature = 6;
}



//
// \brief A MotionCommand.
//
// The MotionCommand comprises of the trajectory the vehicle should
// should follow on, as well as the DynamicState current state, which
// contains the vehicles localization and dynamic properties.
//
message MotionCommand
{
    // The Timestamp of the generation of the trajectory.
    //
    optional Timestamp timestamp = 1;

    // The current dynamic state of the vehicle.
    optional DynamicState current_state = 2;

    // The trajectory the vehicle should follow on.
    optional Trajectory trajectory = 3;


    // \brief A trajectory.
    //
    // A trajectory describes both the current dynamic state of the vehicle,
    // as well as the sequence of desired dynamic states the vehicle should
    // follow on.
    //
    message Trajectory
    {
        // The type of spacing between two trajectory points. Spacing can
        // either be spacial or temporal.
        //
        optional SpacingType spacing_type = 1;

        // The the distance (spacial or temporal) between two consecutive
        // trajectory points. Spacial distances are in given in [m],
        // temporal distances are given in [s].
        optional double spacing = 2;

        // The reference of the vehicle
        //
        repeated DynamicState reference = 3;
        
        
        enum SpacingType
        {
            // Trajectory points are spaced with equal distance (spacial)
            //
            SPACING_DISTANCE = 0;

            // Trajectory points are spaced with equal time deltas (temporal)
            //
            SPACING_TIME = 1;
        }
    }
}
